//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventarioAlmacen
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AlmacenEntities : DbContext
    {
        public AlmacenEntities()
            : base("name=AlmacenEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<categoria> categoria { get; set; }
        public virtual DbSet<marca> marca { get; set; }
        public virtual DbSet<producto> producto { get; set; }
        public virtual DbSet<usuario> usuario { get; set; }
    
        public virtual ObjectResult<sp_get_productos_Result> sp_get_productos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_productos_Result>("sp_get_productos");
        }
    
        public virtual int sp_insert_productos(string nombre, string modelo, string precio, Nullable<int> categoria, Nullable<int> marca)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("modelo", modelo) :
                new ObjectParameter("modelo", typeof(string));
    
            var precioParameter = precio != null ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(string));
    
            var categoriaParameter = categoria.HasValue ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(int));
    
            var marcaParameter = marca.HasValue ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_productos", nombreParameter, modeloParameter, precioParameter, categoriaParameter, marcaParameter);
        }
    
        public virtual int sp_update_productos(Nullable<int> id, string nombre, string modelo, string precio, Nullable<int> categoria, Nullable<int> marca)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("modelo", modelo) :
                new ObjectParameter("modelo", typeof(string));
    
            var precioParameter = precio != null ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(string));
    
            var categoriaParameter = categoria.HasValue ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(int));
    
            var marcaParameter = marca.HasValue ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_productos", idParameter, nombreParameter, modeloParameter, precioParameter, categoriaParameter, marcaParameter);
        }
    
        public virtual int sp_delete_productos(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_productos", idParameter);
        }
    
        public virtual int sp_delete_categoria(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_categoria", idParameter);
        }
    
        public virtual int sp_delete_marcas(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_marcas", idParameter);
        }
    
        public virtual int sp_delete_usuarios(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_usuarios", idParameter);
        }
    
        public virtual ObjectResult<sp_get_categoria_Result> sp_get_categoria()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_categoria_Result>("sp_get_categoria");
        }
    
        public virtual ObjectResult<sp_get_marcas_Result> sp_get_marcas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_marcas_Result>("sp_get_marcas");
        }
    
        public virtual ObjectResult<sp_get_usuario_Result> sp_get_usuario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_usuario_Result>("sp_get_usuario");
        }
    
        public virtual int sp_insert_categoria(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_categoria", nombreParameter);
        }
    
        public virtual int sp_insert_marcas(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_marcas", nombreParameter);
        }
    
        public virtual int sp_insert_usuarios(string nombre, string username, string password, string email)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_usuarios", nombreParameter, usernameParameter, passwordParameter, emailParameter);
        }
    
        public virtual int sp_update_categoria(Nullable<int> id, string nombre)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_categoria", idParameter, nombreParameter);
        }
    
        public virtual int sp_update_marcas(Nullable<int> id, string nombre)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_marcas", idParameter, nombreParameter);
        }
    
        public virtual int sp_update_usuarios(Nullable<int> id, string nombre, string username, string password, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_usuarios", idParameter, nombreParameter, usernameParameter, passwordParameter, emailParameter);
        }
    }
}
